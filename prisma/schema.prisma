// this prisma config is here for the sole purpose of writing schemas so i can convert it to drizzle using introspection
// if it works, it works 

datasource db {
    provider     = "mysql"
    url          = env("DB_URL_SEC")
    relationMode = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model authUser {
    id                         String   @id @unique
    avatar_url                 String?
    banner_url                 String?
    username                   String   @unique
    username_colour            String?
    email                      String   @unique
    email_verified             Int      @default(0)
    pronouns                   String?
    verified                   Int      @default(0)
    bio                        String?  @default("")
    date_joined                DateTime
    role_flags                 Int      @default(1)
    self_assignable_role_flags Int?

    // relations
    followers           follower[]          @relation("followerToUser")
    following           following[]         @relation("followingToUser")
    PendingAssets       pendingAssets[]
    socials_connections socialsConnection[]
    saved_oc_generators savedOCGenerators[]
    auth_session        authSession[]
    auth_key            authKey[]
    assets              assets[]
}

model authSession {
    id             String   @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    user           authUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}

model authKey {
    id              String   @id @unique
    hashed_password String?
    user_id         String
    user            authUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}

model emailVerificationToken {
    id      String @id @unique
    user_id String
    expires BigInt

    @@index([user_id])
}

model passwordResetToken {
    id      String @id @unique
    user_id String
    expires BigInt

    @@index([user_id])
}

model follower {
    id       String   @id @unique
    user_id  String
    follower authUser @relation("followerToUser", fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id])
}

model following {
    id        String   @id @unique
    user_id   String
    following authUser @relation("followingToUser", fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id])
}

model socialsConnection {
    id      String   @id @unique
    user_id String
    tiktok  String?
    discord String?
    user    authUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id])
}

model games {
    id               Int      @id @default(autoincrement())
    name             String
    asset_count      Int      @default(0)
    asset_categories String   @default("") // comma seperated: "category1,category2.."
    category_count   Int      @default(0)
    last_updated     DateTime

    @@index([id])
    @@index([name])
}

model assets {
    id             Int           @id @default(autoincrement())
    name           String
    game           String
    asset_category String
    tags           assetTagsName @default(OFFICIAL)
    url            String
    status         statusEnums   @default(PENDING)
    user           authUser      @relation(fields: [uploaded_by], references: [id], onDelete: Cascade)
    uploaded_by    String
    uploaded_date  String
    view_count     Int           @default(0)
    download_count Int           @default(0)
    file_size      Int
    width          Int           @default(0)
    height         Int           @default(0)

    @@index([id])
    @@index([name])
    @@index([game])
    @@index([status])
    @@index([tags])
    @@index([uploaded_by])
}

model pendingAssets {
    id             Int           @id @default(autoincrement())
    name           String
    game           String
    asset_category String
    tags           assetTagsName @default(OFFICIAL)
    url            String
    status         statusEnums   @default(PENDING)
    user           authUser      @relation(fields: [uploaded_by], references: [id], onDelete: Cascade)
    uploaded_by    String
    uploaded_date  String
    view_count     Int           @default(0)
    download_count Int           @default(0)
    file_size      Int
    width          Int           @default(0)
    height         Int           @default(0)

    @@index([id])
    @@index([name])
    @@index([game])
    @@index([status])
    @@index([tags])
    @@index([uploaded_by])
}

model savedOCGenerators {
    id         Int      @id @default(autoincrement())
    game       String
    data       String
    user       authUser @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id    String
    saved_date DateTime

    @@index([id])
    @@index([game])
    @@index([user_id])
}

// tags enums
enum assetTagsName {
    OFFICIAL
    FANMADE
}

// status enums
enum statusEnums {
    PENDING
    APPROVED
    REJECTED
}
